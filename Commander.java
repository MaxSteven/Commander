import javax.swing.*;import javax.swing.border.*;import java.awt.*;import java.awt.event.*;import javax.swing.SwingUtilities;import javax.swing.filechooser.*;import java.awt.dnd.*;public class Commander{    // CLIconstruct(String in, String out, int start, int end, int by,    //             int x, int y, int min, int max, int thresh, int moblur )        static CLIconstruct CMD1 = new CLIconstruct("/foo.ma", "/foo.####.exr",                                         1, 200, 1, 1920, 1080, 1, 8, 0.05, 1 );        static Color panelBGColor = new Color(68, 68, 68);    static Color darkBGColor = new Color(54, 54, 54);    static Color buttonTextColor = new Color(187, 187, 187);    static Color fieldTextColor = new Color(225, 225, 225);        static String command1_string = "";    static String inputCMD_string = "";        static JFrame frame = new JFrame ("Commander");    static JPanel uber_panel = new JPanel();        static String dropString = "<html><font face=\"sans-serif\" size=\"3\" color=\"E1E1E1\"><center>Drop A Maya Scene File On Window To Begin</html>";    static String waitString = "<html><font face=\"sans-serif\" size=\"2\" color=\"E1E1E1\">Awaiting file info...</html>";        // -- all command holding text panes    static JTextPane inCMD_text = new CMDTextPane();    static JTextPane outCMD_text = new CMDTextPane();    static JTextPane fcCMD_text = new CMDTextPane();    static JTextPane isCMD_text = new CMDTextPane();    static JTextPane oqCMD_text = new CMDTextPane();    static JTextPane wkCMD_text = new CMDTextPane();    static JTextPane cmd1_text = new CMDTextPane();        // -- set up input/output icons    static ImageIcon inputIcon = new ImageIcon("images/io_inputFile.png");    static ImageIcon computerIcon = new ImageIcon("images/io_computer.png");    static ImageIcon dropIcon = new ImageIcon("images/dropIcon.png");    static ImageIcon outputIcon = new ImageIcon("images/io_outputFile.png");    // -- input/output buttons    static JButton inputButton = new JButton("InputFile.ma", inputIcon);    static JButton outputButton = new JButton("OutputFile.####.exr", outputIcon);    static JLabel ioComputer = new JLabel();        // -- frame count controls    static JRadioButton stillButton = new JRadioButton("Still Frame");    static JRadioButton animButton = new JRadioButton("Animation");    static JFormattedTextField singleFrameField = new JFormattedTextField();    static JFormattedTextField endFrameField = new JFormattedTextField();    static JFormattedTextField startFrameField = new JFormattedTextField();        // -- preset icons    static ImageIcon draftIcon = new ImageIcon("images/pre_draft_unsel.png");    static ImageIcon goodIcon = new ImageIcon("images/pre_good_unsel.png");    static ImageIcon finalIcon = new ImageIcon("images/pre_final_unsel.png");    static ImageIcon draftSelIcon = new ImageIcon("images/pre_draft_sel.png");    static ImageIcon goodSelIcon = new ImageIcon("images/pre_good_sel.png");    static ImageIcon finalSelIcon = new ImageIcon("images/pre_final_sel.png");        // -- image size icons    static ImageIcon finalSizeImage = new ImageIcon("images/size_final.png");    static ImageIcon goodSizeImage = new ImageIcon("images/size_good.png");    static ImageIcon draftSizeImage = new ImageIcon("images/size_draft.png");    // -- image size controls    static JRadioButton finalButton = new JRadioButton( "1920x1080 (Final HD)" );    static JRadioButton goodButton = new JRadioButton( "1280x720 (Good)" );    static JRadioButton draftButton = new JRadioButton( "720x405 (Draft)" );    static JLabel isDisplay = new JLabel();        // -- override panel controls    static JCheckBox overrideBox = new JCheckBox( "Override" );    static JCheckBox moblurBox = new JCheckBox( "Motion Blur" );    static JFormattedTextField minSampField = new JFormattedTextField();    static JFormattedTextField maxSampField = new JFormattedTextField();    static JFormattedTextField threshField = new JFormattedTextField();    static String[] samplerStrings = {"Adaptive", "Progressive", "Fixed"};    static JComboBox samplerList = new JComboBox( samplerStrings );        // -- worker panel icons    static ImageIcon workerStraight1 = new ImageIcon("images/work_straight1.png");    static ImageIcon workerStraight2 = new ImageIcon("images/work_straight2.png");    static ImageIcon workerInter2 = new ImageIcon("images/work_inter2.png");    static ImageIcon workerStraight3 = new ImageIcon("images/work_straight3.png");    static ImageIcon workerInter3 = new ImageIcon("images/work_inter3.png");    // -- worker panel controls    static String[] numStrings = {"1 Computer", "2 Computers", "3 Computers"};    static JComboBox wkNumList = new JComboBox( numStrings );    static JRadioButton wkStraightButton = new JRadioButton( "Straight" );    static JRadioButton wkInterButton = new JRadioButton( "Interlaced" );    static JLabel wkDisplay = new JLabel();        // -- final command section    static String[] cmdStrings = {"Command 1:", "Command 2:", "Command 3:"};    static JComboBox cmdList = new JComboBox( cmdStrings );    static JButton cpybutton = new JButton("To Clipboard");    static JButton gResetButton = new JButton( "Reset" );    static JButton gQuitButton = new JButton( "Quit" );            // -- Drop Panel section    static JButton dropButton = new JButton("InputFile.ma", inputIcon);        static int strInter = 0;    static int allEnabled = 1;        static JLabel startFrameLabel = new JLabel("Start:", JLabel.RIGHT);    //static final JFileChooser fc = new JFileChooser();        public static void setTextFields()    {        inCMD_text.setText(CMD1.getFormattedInput("input command:"));        outCMD_text.setText(CMD1.getFormattedOutput("output command:"));        fcCMD_text.setText(CMD1.getFormattedFrameCount("frame count command:"));        isCMD_text.setText(CMD1.getFormattedImageSize("image sizing command:"));        oqCMD_text.setText(CMD1.getFormattedImageQuality("image quality command:"));        wkCMD_text.setText(CMD1.getFormattedWorkers("adjusted frame count command:"));        cmd1_text.setText(CMD1.getFormattedCommand(""));    }        public static void clearTextFields()    {        inCMD_text.setText(dropString);        outCMD_text.setText("");        fcCMD_text.setText(waitString);        isCMD_text.setText(waitString);        oqCMD_text.setText(waitString);        wkCMD_text.setText(waitString);        cmd1_text.setText(waitString);    }        public static void finalSizeSelected()    {        isDisplay.setIcon( finalSizeImage );        CMD1.setXSize(1920);        CMD1.setYSize(1080);        setTextFields();    }        public static void goodSizeSelected()    {        isDisplay.setIcon( goodSizeImage );        CMD1.setXSize(1280);        CMD1.setYSize(720);        setTextFields();    }        public static void draftSizeSelected()    {        isDisplay.setIcon( draftSizeImage );        CMD1.setXSize(720);        CMD1.setYSize(405);        setTextFields();    }        public static void checkWorkerStatus()    {        int num = wkNumList.getSelectedIndex();                if ( num == 0 ){            wkDisplay.setIcon( workerStraight1 );            wkStraightButton.setSelected( true );            wkInterButton.setEnabled( false );            strInter = 0;                    } else if (num == 1 && strInter == 0){            wkDisplay.setIcon( workerStraight2 );            wkInterButton.setEnabled( true );                    } else if (num == 1 && strInter == 1){            wkDisplay.setIcon( workerInter2 );            wkInterButton.setEnabled( true );                    } else if (num == 2 && strInter == 0){            wkDisplay.setIcon( workerStraight3 );            wkInterButton.setEnabled( true );                    } else if (num == 2 && strInter == 1){            wkDisplay.setIcon( workerInter3 );            wkInterButton.setEnabled( true );        }    }        public static void addActions()    {        // -- image size control actions        finalButton.addActionListener(new ActionListener() {            public void actionPerformed (ActionEvent e){                finalSizeSelected();            }        });                goodButton.addActionListener(new ActionListener() {            public void actionPerformed (ActionEvent e){                goodSizeSelected();            }        });                draftButton.addActionListener(new ActionListener() {            public void actionPerformed (ActionEvent e){                draftSizeSelected();            }        });                // -- worker control actions        wkNumList.addActionListener(new ActionListener () {            public void actionPerformed (ActionEvent e) {                checkWorkerStatus();            }        });                wkStraightButton.addActionListener(new ActionListener () {            public void actionPerformed (ActionEvent e) {                strInter = 0;                checkWorkerStatus();            }        });                wkInterButton.addActionListener(new ActionListener () {            public void actionPerformed (ActionEvent e) {                strInter = 1;                checkWorkerStatus();            }        });                overrideBox.addActionListener(new ActionListener () {            public void actionPerformed (ActionEvent e) {                if (overrideBox.isSelected() ){                    enableOverrides();                } else {                    disableOverrides();                }            }        });                new FileDrop( frame, new FileDrop.Listener() {            public void filesDropped( java.io.File[] files )            {                System.out.println( files[0].getPath() );                                CMD1.setInput( files[0].getPath() );                CMD1.setOutput( files[0].getName() );                                if (allEnabled == 1){                    clearTextFields();                    clearTextFields();                    ioComputer.setIcon(dropIcon);                    disableAll();                } else {                    setTextFields();                    setTextFields();                    ioComputer.setIcon(computerIcon);                    enableAll();                                    }            }        });    }        public static void disableAll(){        inputButton.setEnabled(false);        outputButton.setEnabled(false);        stillButton.setEnabled(false);        animButton.setEnabled(false);        singleFrameField.setEnabled(false);        endFrameField.setEnabled(false);        startFrameField.setEnabled(false);        finalButton.setEnabled(false);        goodButton.setEnabled(false);        draftButton.setEnabled(false);                overrideBox.setEnabled(false);        moblurBox.setEnabled(false);        minSampField.setEnabled(false);        maxSampField.setEnabled(false);        threshField.setEnabled(false);        samplerList.setEnabled(false);        wkNumList.setEnabled(false);        wkStraightButton.setEnabled(false);        wkInterButton.setEnabled(false);                cmdList.setEnabled(false);        cpybutton.setEnabled(false);        gResetButton.setEnabled(false);        allEnabled = 0;    }        public static void enableAll(){                        inputButton.setEnabled(true);        outputButton.setEnabled(true);                stillButton.setEnabled(true);        animButton.setEnabled(true);        singleFrameField.setEnabled(true);        endFrameField.setEnabled(true);        startFrameField.setEnabled(true);                finalButton.setEnabled(true);        goodButton.setEnabled(true);        draftButton.setEnabled(true);        isDisplay.setEnabled(true);                overrideBox.setEnabled(true);                        wkNumList.setEnabled(true);        wkStraightButton.setEnabled(true);        wkInterButton.setEnabled(true);        wkDisplay.setEnabled(true);                cmdList.setEnabled(true);        cpybutton.setEnabled(true);        gResetButton.setEnabled(true);        allEnabled = 1;                           }        public static void enableOverrides()    {        moblurBox.setEnabled(true);        minSampField.setEnabled(true);        maxSampField.setEnabled(true);        threshField.setEnabled(true);        samplerList.setEnabled(true);    }        public static void disableOverrides()    {        moblurBox.setEnabled(false);        minSampField.setEnabled(false);        maxSampField.setEnabled(false);        threshField.setEnabled(false);        samplerList.setEnabled(false);    }        public static void buildFullUI()    {                        //------------------//        // Input / Output Panel        //================================================                JPanel io_panel = new CommandPanel ( "Input / Output", 100, 135 );                JPanel ioIconPanel = new JPanel( );        ioIconPanel.setBackground( panelBGColor );        ioIconPanel.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));                inputButton.setPreferredSize( new Dimension( 120, 80));        inputButton.setBackground( panelBGColor );        inputButton.setForeground( fieldTextColor );        inputButton.setVerticalTextPosition(SwingConstants.BOTTOM);        inputButton.setHorizontalTextPosition(SwingConstants.CENTER);        inputButton.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));        inputButton.setOpaque(true);                                ioComputer.setIcon(computerIcon);        ioComputer.setBackground( panelBGColor );        ioComputer.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));                        outputButton.setPreferredSize( new Dimension( 120, 80));        outputButton.setBackground( panelBGColor );        outputButton.setForeground( fieldTextColor );        outputButton.setVerticalTextPosition(SwingConstants.BOTTOM);        outputButton.setHorizontalTextPosition(SwingConstants.CENTER);        outputButton.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));        outputButton.setOpaque(true);                ioIconPanel.add(inputButton);        ioIconPanel.add(Box.createRigidArea (new Dimension (18,18)));        ioIconPanel.add(ioComputer);        ioIconPanel.add(Box.createRigidArea (new Dimension (18,18)));        ioIconPanel.add(outputButton);                JPanel ioCMD_panel = new JPanel( new BorderLayout() );                ioCMD_panel.add( inCMD_text, BorderLayout.PAGE_START);        ioCMD_panel.add( outCMD_text, BorderLayout.PAGE_END );                io_panel.add( ioIconPanel, BorderLayout.CENTER );        io_panel.add( ioCMD_panel, BorderLayout.PAGE_END );                        //------------------//        // Frame Count Panel        //================================================                JPanel fc_panel = new CommandPanel( "Frame Count", 100, 110 );                stillButton.setForeground( buttonTextColor );                animButton.setForeground( buttonTextColor );        animButton.setSelected( true );                ButtonGroup fcButtonGRP = new ButtonGroup();        fcButtonGRP.add( stillButton );        fcButtonGRP.add( animButton );                JLabel singleFrameLabel = new JLabel("Frame:", JLabel.RIGHT);        singleFrameLabel.setForeground( buttonTextColor );        singleFrameLabel.setBackground( panelBGColor );        //        JLabel startFrameLabel = new JLabel("Start:", JLabel.RIGHT);        startFrameLabel.setForeground( buttonTextColor );        startFrameLabel.setBackground( panelBGColor );                JLabel endFrameLabel = new JLabel("End:", JLabel.RIGHT);        endFrameLabel.setForeground( buttonTextColor );        endFrameLabel.setBackground( panelBGColor );                singleFrameField.setValue(new Integer(0));        singleFrameField.setColumns(4);        singleFrameField.setHorizontalAlignment( JTextField.CENTER );        singleFrameField.setForeground( fieldTextColor );        singleFrameField.setBackground( darkBGColor );        singleFrameField.setEnabled(false);                endFrameField.setValue(new Integer(100));        endFrameField.setColumns(4);        endFrameField.setHorizontalAlignment( JTextField.CENTER );        endFrameField.setForeground( fieldTextColor );        endFrameField.setBackground( darkBGColor );                startFrameField.setValue(new Integer(0));        startFrameField.setColumns(4);        startFrameField.setHorizontalAlignment( JTextField.CENTER );        startFrameField.setForeground( fieldTextColor );        startFrameField.setBackground( darkBGColor );                JPanel fcStillPanel = new JPanel( new FlowLayout(FlowLayout.LEADING) );        fcStillPanel.setBackground(panelBGColor);                fcStillPanel.add( stillButton );        fcStillPanel.add(Box.createRigidArea (new Dimension (8,8)));        fcStillPanel.add( singleFrameLabel );        fcStillPanel.add( singleFrameField );                JPanel fcAnimPanel = new JPanel( new FlowLayout(FlowLayout.LEADING) );        fcAnimPanel.setBackground(panelBGColor);                fcAnimPanel.add( animButton );        fcAnimPanel.add(Box.createRigidArea (new Dimension (18,18)));        fcAnimPanel.add( startFrameLabel );        fcAnimPanel.add( startFrameField );        fcAnimPanel.add( endFrameLabel );        fcAnimPanel.add( endFrameField );                JPanel fcRadioPanel = new JPanel(new GridLayout(2,0));        fcRadioPanel.setBackground(panelBGColor);        fcRadioPanel.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));        fcRadioPanel.add( fcStillPanel );        fcRadioPanel.add( fcAnimPanel );                fc_panel.add( fcRadioPanel, BorderLayout.LINE_START  );        fc_panel.add( fcCMD_text, BorderLayout.PAGE_END  );                        //------------------//        // Quality Presets Panel        //================================================                CommandPanel qp_panel = new CommandPanel( "Quality Presets", 100, 100 );                        JPanel presetPanel = new JPanel( );        presetPanel.setBackground( panelBGColor );                Dimension buttonDim = new Dimension( 64,64 );                JButton draftPreButton = new JButton(draftIcon);        draftPreButton.setPreferredSize(buttonDim);        draftPreButton.setBackground( panelBGColor );        draftPreButton.setForeground( fieldTextColor );        draftPreButton.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));        draftPreButton.setOpaque(true);                JButton midPreButton = new JButton(goodIcon);        midPreButton.setPreferredSize(buttonDim);        midPreButton.setBackground( panelBGColor );        midPreButton.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));        midPreButton.setOpaque(true);                JButton finalPreButton = new JButton(finalIcon);        finalPreButton.setPreferredSize(buttonDim);        finalPreButton.setBackground( panelBGColor );        finalPreButton.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));        finalPreButton.setOpaque(true);                presetPanel.add(draftPreButton);        presetPanel.add(Box.createRigidArea (new Dimension (50,18)));        presetPanel.add(midPreButton);        presetPanel.add(Box.createRigidArea (new Dimension (50,18)));        presetPanel.add(finalPreButton);        presetPanel.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));                qp_panel.add( presetPanel, BorderLayout.CENTER );                        //------------------//        // Image Size Panel        //================================================                CommandPanel is_panel = new CommandPanel( "Image Size", 100, 130 );                finalButton.setForeground( buttonTextColor );        finalButton.setSelected( true );        goodButton.setForeground( buttonTextColor );        draftButton.setForeground( buttonTextColor );                ButtonGroup isButtonGRP = new ButtonGroup();        isButtonGRP.add( finalButton );        isButtonGRP.add( goodButton );        isButtonGRP.add( draftButton );                JPanel isRadioPanel = new JPanel( new GridLayout(0,1));        isRadioPanel.setBackground(panelBGColor);        isRadioPanel.add( finalButton );        isRadioPanel.add( goodButton );        isRadioPanel.add( draftButton );                JPanel isContentPanel = new JPanel();        isContentPanel.setBackground( panelBGColor );        isContentPanel.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));                isDisplay.setIcon( finalSizeImage );        isDisplay.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));                isContentPanel.add(isRadioPanel);        isContentPanel.add(Box.createRigidArea (new Dimension (30,1)));        isContentPanel.add(isDisplay);                is_panel.add( isContentPanel, BorderLayout.LINE_START );        is_panel.add( isCMD_text, BorderLayout.PAGE_END );                //------------------//        // Override Image Quality Panel        //================================================                CommandPanel oq_panel = new CommandPanel( "Override Image Quality", 100, 150 );                        overrideBox.setForeground( buttonTextColor );                moblurBox.setForeground( buttonTextColor );        moblurBox.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));                JLabel minSampLabel = new JLabel("Min Samples: ", JLabel.RIGHT);        minSampLabel.setForeground( buttonTextColor );        minSampLabel.setBackground( panelBGColor );                JLabel maxSampLabel = new JLabel("Max Samples: ", JLabel.RIGHT);        maxSampLabel.setForeground( buttonTextColor );        maxSampLabel.setBackground( panelBGColor );                JLabel threshLabel = new JLabel("Threshold: ", JLabel.RIGHT);        threshLabel.setForeground( buttonTextColor );        threshLabel.setBackground( panelBGColor );        threshLabel.setBorder(BorderFactory.createEmptyBorder(5,0,5,0));                minSampField.setColumns(5);        minSampField.setValue(new Integer(2));        minSampField.setHorizontalAlignment( JTextField.CENTER );        minSampField.setForeground( fieldTextColor );        minSampField.setBackground( darkBGColor );        minSampField.setEnabled(true);                maxSampField.setColumns(5);        maxSampField.setValue(new Integer(16));        maxSampField.setHorizontalAlignment( JTextField.CENTER );        maxSampField.setForeground( fieldTextColor );        maxSampField.setBackground( darkBGColor );        maxSampField.setEnabled(true);                threshField.setColumns(5);        threshField.setValue(new Float(0.01));        threshField.setHorizontalAlignment( JTextField.CENTER );        threshField.setForeground( fieldTextColor );        threshField.setBackground( darkBGColor );        threshField.setEnabled(true);                samplerList.setSelectedIndex(1);                JPanel qLeftPanel = new JPanel( new GridLayout(3,0));        qLeftPanel.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));        qLeftPanel.setBackground( panelBGColor );                qLeftPanel.add( overrideBox );        qLeftPanel.add( Box.createRigidArea (new Dimension (18,18)) );        qLeftPanel.add( samplerList );                JPanel qLabelPanel = new JPanel( new GridLayout(3,0));        qLabelPanel.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));        qLabelPanel.setBackground( panelBGColor );                qLabelPanel.add( minSampLabel );        qLabelPanel.add( maxSampLabel );        qLabelPanel.add( threshLabel );                JPanel qFieldPanel = new JPanel( new GridLayout(3,0));        qFieldPanel.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));        qFieldPanel.setBackground( panelBGColor );                qFieldPanel.add( minSampField );        qFieldPanel.add( maxSampField );        qFieldPanel.add( threshField );                JPanel qRightPanel = new JPanel( new GridLayout(3,0));        qRightPanel.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));        qRightPanel.setBackground( panelBGColor );                qRightPanel.add( moblurBox );        qRightPanel.add( Box.createRigidArea (new Dimension (20,25)) );        qRightPanel.add( Box.createRigidArea (new Dimension (18,25)) );                JPanel qSettingsPanel = new JPanel();        qSettingsPanel.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));        qSettingsPanel.setBackground( panelBGColor );                qSettingsPanel.add( qLeftPanel );        qSettingsPanel.add( Box.createRigidArea (new Dimension (5,5)) );        qSettingsPanel.add( qLabelPanel );        qSettingsPanel.add( qFieldPanel );        qSettingsPanel.add( Box.createRigidArea (new Dimension (5,5)) );        qSettingsPanel.add( qRightPanel );        oq_panel.add( qSettingsPanel, BorderLayout.LINE_START );        oq_panel.add( oqCMD_text, BorderLayout.PAGE_END );                disableOverrides();                //------------------//        // Worker Panel        //================================================                CommandPanel wk_panel = new CommandPanel( "Workers", 100, 140);                wkStraightButton.setForeground( buttonTextColor );        wkStraightButton.setSelected( true );                        wkInterButton.setForeground( buttonTextColor );                ButtonGroup wkButtonGRP = new ButtonGroup();        wkButtonGRP.add( wkStraightButton );        wkButtonGRP.add( wkInterButton );                        wkNumList.setSelectedIndex(0);                JPanel wkRadioPanel = new JPanel( new GridLayout(0,1));        wkRadioPanel.setBackground(panelBGColor);                wkRadioPanel.add( wkNumList );        wkRadioPanel.add( wkStraightButton );        wkRadioPanel.add( wkInterButton );        wkRadioPanel.setBorder(BorderFactory.createEmptyBorder(8,8,16,8));                        JPanel wkImagePanel = new JPanel();        wkImagePanel.setBackground( panelBGColor );        wkImagePanel.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));                        wkDisplay.setIcon( workerStraight1 );        wkDisplay.setBorder(BorderFactory.createEmptyBorder(1,1,1,1));                wkImagePanel.add(wkRadioPanel);        wkImagePanel.add(wkDisplay);                wk_panel.add(wkImagePanel, BorderLayout.LINE_START);        wk_panel.add(wkCMD_text, BorderLayout.PAGE_END );                //------------------//        // Final Command Panel        //================================================                JPanel cmd1_panel = new JPanel( new GridLayout(0,1));        cmd1_panel.setBackground( panelBGColor );                cpybutton.setBackground( panelBGColor );        cpybutton.setOpaque(true);                cmd1_panel.add(cmdList);        cmd1_panel.add(cpybutton);                JPanel cmd_panel = new JPanel( new BorderLayout() );        cmd_panel.setBackground( panelBGColor );                        cmd1_text.setContentType("text/html");        cmd1_text.setPreferredSize( new Dimension( 380, 20 ));        cmd1_text.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));        cmd1_text.setBackground( darkBGColor );        cmd1_text.setForeground( fieldTextColor );                JPanel globalButtonsPanel = new JPanel( new BorderLayout() );        globalButtonsPanel.setBackground( panelBGColor );                JPanel gButtons = new JPanel( new GridLayout(1, 2) );        gButtons.setBackground( panelBGColor );        gButtons.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));                        gButtons.add( gResetButton );        gButtons.add( gQuitButton );                globalButtonsPanel.add( gButtons, BorderLayout.LINE_END );                cmd_panel.add( cmd1_panel, BorderLayout.LINE_START );        cmd_panel.add( cmd1_text, BorderLayout.LINE_END );        cmd_panel.add( globalButtonsPanel, BorderLayout.PAGE_END );        cmd_panel.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));                        //------------------//        // UBER Panel        //================================================                        uber_panel.setLayout( new BoxLayout(uber_panel, BoxLayout.PAGE_AXIS) );                uber_panel.setBackground(new Color(68, 68, 68));        uber_panel.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));                uber_panel.add( io_panel );        uber_panel.add( fc_panel );        uber_panel.add( qp_panel );        uber_panel.add( is_panel );        uber_panel.add( oq_panel );        uber_panel.add( wk_panel );        uber_panel.add( cmd_panel );                frame.getContentPane().add (uber_panel);                frame.addWindowListener(new WindowAdapter() {            public void windowClosing (WindowEvent e) { System.exit(0); }        });                        frame.setResizable(false );        frame.setVisible(true);        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.pack ();    }            public static void main (String[] args)    {        addActions();        setTextFields();        buildFullUI();    }}